{"version":3,"sources":["components/pages/Landing.js","components/pages/About.js","components/shop/ItemList.js","components/shop/Shop.js","components/Header.js","components/chatbot/Message.js","components/chatbot/Card.js","components/chatbot/Chatbot.js","components/App.js","registerServiceWorker.js","index.js"],"names":["Landing","style","textAlign","About","ItemList","Shop","Header","className","to","id","Message","props","speaks","href","text","Card","float","paddingLeft","width","alt","payload","fields","header","stringValue","src","image","description","price","target","rel","link","cookies","Cookies","ChatBot","_handleInputKeyPress","e","key","df_text_query","value","state","messages","undefined","get","set","uuid","path","says","msg","this","setState","axios","post","userID","res","data","fulfillmentMessages","eventName","event","df_event_query","messagesEnd","scrollIntoView","behaviour","talkInput","focus","cards","map","card","i","structValue","message","overflow","overflowY","height","listValue","values","length","renderCards","stateMessages","renderOneMessage","border","syle","renderMessages","ref","el","clear","margin","paddingRight","placeholder","type","input","onKeyPress","Component","App","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5bc66a9a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Landing = () => (\n        <div style={{textAlign: \"center\"}}>\n        \n        <h3>Cherche un cours</h3>\n        </div>\n    );\n\nexport default Landing; ","import React from 'react';\n\nconst About = () => (\n        <div style={{textAlign: \"center\"}}>\n            <h1> About us !</h1>\n        </div>\n    );\n\n\nexport default About; ","import React from 'react';\n\n\nconst ItemList = () => (\n        <div>\n            Here goes a list of items\n        </div>\n    );\n\n\nexport default ItemList; ","import React from 'react';\nimport ItemList from './ItemList';\n\nconst Shop = () => (\n        <div style={{textAlign: \"center\"}}>\n            <h2>Shop</h2>\n            <ItemList />\n        </div>\n\n    );\n\nexport default Shop; ","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst Header = () => (\n        <nav>\n            <div className=\"nav-wrapper blue darken-3 \" >\n                <Link to={'/'} className=\"brand-logo center \"> Cours d√©veloppement web</Link>\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n                    {/* <li>\n                        <Link to={'/shop'}> Shop </Link>\n                    </li>\n                    <li>\n                        <Link to={'/about'}> About </Link>\n                    </li> */}\n                </ul>\n            </div>\n        </nav>\n    );\n\n\nexport default Header; ","import React from 'react'; \n\nconst Message = (props) => (\n\n    <div className=\"col s12 m8 offset-m2 offset-l3\">\n        <div className=\"card-pannel grey lighten-5 z-depth-1\">\n            <div className=\"row valign-wrapper\">\n                {props.speaks==='bot' && \n                <div className=\"col s2\">\n                    <button href=\"\" className=\"btn-floating btn-large waves-effect waves-light blue\">{props.speaks}</button>\n                </div>\n                }\n                <div className=\"col s10\">\n                    <span className=\"black-text\">\n                        {props.text}\n                    </span>\n                </div>\n                {props.speaks==='me' && \n                <div className=\"col s2\">\n                    <button className=\"btn-floating btn-large waves-effect waves-light blue\">{props.speaks}</button>\n                </div>\n                }\n            </div>\n        </div>\n    </div>\n);\n\n\nexport default Message; ","import React from 'react';\n\nconst Card = (props) => {\n\n    return (\n        \n    <div style={{float: 'right', paddingLeft: 30, width:270}}>\n        <div className=\"card\">\n            <div className=\"card-image\" style={{width: 240}}>\n                <img alt={props.payload.fields.header.stringValue} src={props.payload.fields.image.stringValue}/>\n                    <span className=\"card-title\">{props.payload.fields.header.stringValue}</span>\n             </div>       \n        <div className=\"card-content\">\n          {props.payload.fields.description.stringValue}\n            <p><a>{props.payload.fields.price.stringValue}</a></p>\n        </div>\n        <div className=\"card-action\">\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href={props.payload.fields.link.stringValue}>Get Now</a>\n        </div>\n      </div>\n\n    </div>\n    )\n}\n\n\nexport default Card","import React , {Component} from 'react';\nimport axios from 'axios/index';\nimport Cookies from 'universal-cookie';\nimport {v4 as uuid } from 'uuid';\n\nimport Message from './Message';\nimport Card from './Card';\n\nconst cookies = new Cookies();\n\n\n\nclass ChatBot extends Component {\n\n    messagesEnd; \n    talkInput;\n\n    constructor (props) {\n\n        super(props);\n\n        this.state = {\n            messages: []\n        }\n    \n        if(cookies.get('userID') === undefined) {\n            cookies.set('userID', uuid(),{path: '/'});\n        }\n       \n\n        // console.log('UserID: ',cookies.get('userID'));\n        \n    }\n\n\n    async df_text_query(text) {\n\n        let says = {\n            speaks: 'me',\n            msg: {\n                text: {\n                    text: text\n                }\n            }\n        }\n\n        this.setState({messages: [...this.state.messages, says]})\n        try {\n\n            const res = await axios.post('/api/df_text_query', {text: text, userID: cookies.get('userID')});\n\n            for ( let msg of res.data.fulfillmentMessages) {            \n                says = {\n                    speaks: 'bot',\n                    msg: msg\n                }\n    \n                this.setState({messages: [...this.state.messages,says]});\n            }\n    \n        } catch(e) {\n            says = {\n                speaks: 'bot',\n                msg: {\n                    text: {\n                        text: 'il y a un probl√®me de connection, essayons plus tard'\n                    }\n                }\n            }\n            this.setState({messages: [...this.state.messages,says]});\n        }\n        \n    }\n\n   async  df_event_query(eventName) {\n\n    let says = {\n        speaks: 'me',\n        msg: {\n            event: {\n                event: eventName\n            }\n        }\n    }\ntry {\n    const res = await axios.post('/api/df_event_query', {event: eventName, userID: cookies.get('userID')});\n\n    for ( let msg of res.data.fulfillmentMessages) {\n\n\n         says = {\n            speaks: 'bot',\n            msg: msg\n        }\n\n        this.setState({messages: [...this.state.messages,says]});\n    }\n\n\n} catch(e){\n\n    says = {\n        speaks: 'bot',\n        msg: {\n            text: {\n                text: 'il y a un probl√®me de connection, essayons plus tard'\n            }\n        }\n    }\n    this.setState({messages: [...this.state.messages,says]});\n}\n    \n    }\n\n    componentDidMount () {\n        this.df_event_query('welcome');    \n    }\n\n    componentDidUpdate() {\n        this.messagesEnd.scrollIntoView({behaviour: \"smooth\"});\n        this.talkInput.focus();\n    }\n\n    renderCards(cards) {\n           return cards.map((card, i) => <Card key={i} payload={card.structValue}/>)       \n    }\n\n    renderOneMessage(message,i) {\n\n        if(message.msg && message.msg.text && message.msg.text.text) {\n\n       return <Message key={i} speaks={message.speaks} text={message.msg.text.text}/>  ;              \n       \n\n        } else if (message.msg && message.msg.payload && message.msg.payload.fields && message.msg.payload.fields.cards) {\n           \n                return    <div key={i}>\n                    <div className=\"card-panel grey lighten-5 z-depth-1\" >\n                        <div style={{overflow: 'hidden'}}>\n                            <div className=\"col s2\">\n                                <button href=\"\" className=\"btn-floating btn-large waves-effect waves-light blue\">{message.speaks}</button>\n                            </div>\n                            <div style={{overflow: 'auto', overflowY: 'scroll'}}>\n                                <div style={{height: 300, width: message.msg.payload.fields.cards.listValue.values.length * 270}}>\n                                    {this.renderCards(message.msg.payload.fields.cards.listValue.values)}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div> \n          \n        }\n\n    }\n\n    renderMessages (stateMessages) {\n        if(stateMessages) {\n\n           return stateMessages.map((message, i) => {return this.renderOneMessage(message,i)});\n\n        } else {\n            return null; \n        }\n    }\n\n    _handleInputKeyPress = (e) => {\n        if(e.key === 'Enter') {\n            this.df_text_query(e.target.value);\n            e.target.value = '';\n        }\n    }\n\n    render() {\n        return(\n\n            <div style={{height: 400, width: 400, float: 'center', border: '1px solid lightgrey'}}>\n                <nav>\n                    <div className=\"nav-wrapper blue darken-3\">\n                        <a className=\"brand-logo\">Chat'Bout</a>\n                    </div>\n                </nav>\n                <div id=\"chatbot\" syle={{height: 388, width: '100%', overflow: 'auto'}}>\n                    {this.renderMessages(this.state.messages)}\n                    <div ref={(el) => {this.messagesEnd = el}}\n                    syle={{float:'left', clear:\"both\" }} />\n                </div>\n                <div className=\"col s12\">\n                    <input style={{margin:0,paddingLeft:'1%', paddingRight:'1%', width:'98%'}} placeholder=\"√©cris un truc au bot\" type=\"text\" ref={(input)=> {this.talkInput = input}} onKeyPress={this._handleInputKeyPress} />\n                </div>\n\n            </div>\n           \n        )\n    }\n\n}\n\nexport default ChatBot; ","import React from 'react'; \nimport {BrowserRouter, Route } from 'react-router-dom';\n\nimport Landing from './pages/Landing';\nimport About from './pages/About';\nimport Shop from './shop/Shop';\nimport Header from './Header';\nimport ChatBot from './chatbot/Chatbot';\n\nconst App = () => (\n    \n        <div>\n            <BrowserRouter>\n                <div className=\"container\">\n                    <Header />\n                    <Route exact path=\"/\" component={Landing} />\n                    <Route exact path=\"/about\" component= {About} />\n                    <Route exact path=\"/shop\" component={Shop} />\n                    <ChatBot />\n                </div>\n            </BrowserRouter>\n        </div>\n    \n    );\n\n\nexport default App","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\n            );\n          });\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport 'materialize-css/dist/css/materialize.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nregisterServiceWorker();"],"sourceRoot":""}